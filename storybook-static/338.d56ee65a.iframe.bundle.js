"use strict";(self.webpackChunkforesight_cdss=self.webpackChunkforesight_cdss||[]).push([[338],{"./src/components/ui/QuickSearch.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>QuickSearch});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/next@15.1.4_@babel+core@7.27.1_@playwright+test@1.52.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/.pnpm/next@15.1.4_@babel+core@7.27.1_@playwright+test@1.52.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/index.js"),utils=__webpack_require__("./src/lib/utils.ts");const Input=react.forwardRef((({className,type,...props},ref)=>(0,jsx_runtime.jsx)("input",{type,className:(0,utils.cn)("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",className),ref,...props})));Input.displayName="Input",Input.__docgenInfo={description:"",methods:[],displayName:"Input"};var dist_module=__webpack_require__("./node_modules/.pnpm/@supabase+supabase-js@2.49.4/node_modules/@supabase/supabase-js/dist/module/index.js");__webpack_require__("./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");let supabaseInstance=null;var supabaseDataService_console=__webpack_require__("./node_modules/.pnpm/console-browserify@1.2.0/node_modules/console-browserify/index.js");const supabaseDataService=new class SupabaseDataService{async loadPatientData(){return this.isLoaded?Promise.resolve():this.loadPromise?(supabaseDataService_console.log("SupabaseDataService (Prod Debug): Load already in progress, returning existing promise."),this.loadPromise):(supabaseDataService_console.log("SupabaseDataService (Prod Debug): Initiating new data load sequence."),this.loadPromise=(async()=>{this.patients={},this.admissions={},this.admissionsByPatient={};let patientRows=null;try{supabaseDataService_console.log("SupabaseDataService (Prod Debug): Fetching patients from Supabase...");const{data,error:pErr}=await this.supabase.from("patients").select("*");if(pErr)throw supabaseDataService_console.error("SupabaseDataService (Prod Debug): Error fetching patients:",pErr),pErr;patientRows=data}catch(error){throw supabaseDataService_console.error("SupabaseDataService (Prod Debug): Exception during patient fetch:",error),this.loadPromise=null,error}if(!patientRows)throw supabaseDataService_console.error("SupabaseDataService (Prod Debug): patientRows is null after fetch. Cannot proceed."),this.loadPromise=null,new Error("Patient rows fetch returned null.");supabaseDataService_console.log(`SupabaseDataService (Prod Debug): Fetched ${patientRows.length} raw patient rows from Supabase.`),patientRows.forEach((row=>{var _row_extra_data,_row_extra_data1;supabaseDataService_console.log(`SupabaseDataService (Prod Debug): Processing patient row: ${row.patient_id}`,row);const candidateSources=[{key:"alerts",value:row.alerts},{key:"alerts_json",value:row.alerts_json},{key:"alertsJSON",value:row.alertsJSON},{key:"extra_data.alerts",value:null===(_row_extra_data=row.extra_data)||void 0===_row_extra_data?void 0:_row_extra_data.alerts},{key:"extra_data.alertsJSON",value:null===(_row_extra_data1=row.extra_data)||void 0===_row_extra_data1?void 0:_row_extra_data1.alertsJSON}];let chosenRawAlerts,chosenKey="";for(const c of candidateSources)if(void 0!==c.value&&null!==c.value&&!(Array.isArray(c.value)&&0===c.value.length||"string"==typeof c.value&&0===c.value.trim().length)){chosenRawAlerts=c.value,chosenKey=c.key;break}supabaseDataService_console.log(`SupabaseDataService (Prod Debug): Chosen alerts source for patient ${row.patient_id}: ${chosenKey}`,chosenRawAlerts);const patient={id:row.patient_id,name:row.name,firstName:row.first_name,lastName:row.last_name,gender:row.gender,dateOfBirth:row.dob?new Date(row.dob).toISOString().split("T")[0]:void 0,photo:row.photo_url,race:row.race,maritalStatus:row.marital_status,language:row.language,povertyPercentage:null!==row.poverty_percentage?Number(row.poverty_percentage):void 0,alerts:(()=>{var _row_extra_data,_row_extra_data1;const srcCandidates=[row.alerts,row.alerts_json,row.alertsJSON,null===(_row_extra_data=row.extra_data)||void 0===_row_extra_data?void 0:_row_extra_data.alerts,null===(_row_extra_data1=row.extra_data)||void 0===_row_extra_data1?void 0:_row_extra_data1.alertsJSON];let src;for(const val of srcCandidates)if(null!=val&&!(Array.isArray(val)&&0===val.length||"string"==typeof val&&0===val.trim().length)){src=val;break}if(!src)return[];try{if(Array.isArray(src))return src;if("string"==typeof src){let s=src.trim();(s.startsWith('"')&&s.endsWith('"')||s.startsWith("'")&&s.endsWith("'"))&&(s=s.substring(1,s.length-1)),s=s.replace(/""/g,'"');const parsed=JSON.parse(s);return supabaseDataService_console.log(`SupabaseDataService (Prod Debug): Parsed alerts from string for patient ${row.patient_id}:`,parsed),Array.isArray(parsed)?parsed:[]}}catch(e){supabaseDataService_console.warn("SupabaseDataService: Unable to parse alerts for patient",row.patient_id,e)}return[]})(),primaryDiagnosis:row.primary_diagnosis_description,diagnosis:row.general_diagnosis_details,nextAppointment:row.next_appointment_date?new Date(row.next_appointment_date).toISOString():void 0,reason:row.patient_level_reason};supabaseDataService_console.log(`SupabaseDataService (Prod Debug): Processed patient object for ${patient.id}:`,patient),this.patients[patient.id]=patient,this.admissionsByPatient[patient.id]=[]})),supabaseDataService_console.log(`SupabaseDataService (Prod Debug): Processed and cached ${Object.keys(this.patients).length} patients.`);let visitRows=null,totalVisitsAvailable=0;try{supabaseDataService_console.log("SupabaseDataService (Prod Debug): Attempting to fetch ALL visits with count...");const{data,error:vErr,count}=await this.supabase.from("visits").select("*",{count:"exact"});if(vErr)throw supabaseDataService_console.error("SupabaseDataService (Prod Debug): Error fetching visits:",vErr),vErr;visitRows=data,totalVisitsAvailable=null!=count?count:0,supabaseDataService_console.log(`SupabaseDataService (Prod Debug): Fetched ${visitRows?visitRows.length:0} raw visit rows. Total available: ${totalVisitsAvailable}`)}catch(error){throw supabaseDataService_console.error("SupabaseDataService (Prod Debug): Exception during visits fetch:",error),this.loadPromise=null,error}if(!visitRows)throw supabaseDataService_console.error("SupabaseDataService (Prod Debug): visitRows is null after fetch. Cannot proceed with visits."),this.loadPromise=null,new Error("Visit rows fetch returned null.");let visitsProcessed=0;visitRows.forEach((row=>{var _row_extra_data;const originalPatientIDFromVisitExtraData=null===(_row_extra_data=row.extra_data)||void 0===_row_extra_data?void 0:_row_extra_data.PatientID;if(!originalPatientIDFromVisitExtraData)return void supabaseDataService_console.warn(`SupabaseDataService (Prod Debug): Skipping visit ${row.admission_id} due to missing PatientID in extra_data.`);if(!this.patients[originalPatientIDFromVisitExtraData])return void supabaseDataService_console.warn(`SupabaseDataService (Prod Debug): Skipping visit ${row.admission_id}. Patient by original ID '${originalPatientIDFromVisitExtraData}' not found.`);const patientPublicId=originalPatientIDFromVisitExtraData,compositeKey=`${patientPublicId}_${row.admission_id}`,admission={id:compositeKey,patientId:patientPublicId,scheduledStart:row.scheduled_start_datetime?new Date(row.scheduled_start_datetime).toISOString():"",scheduledEnd:row.scheduled_end_datetime?new Date(row.scheduled_end_datetime).toISOString():"",actualStart:row.actual_start_datetime?new Date(row.actual_start_datetime).toISOString():void 0,actualEnd:row.actual_end_datetime?new Date(row.actual_end_datetime).toISOString():void 0,reason:row.reason_for_visit,transcript:row.transcript,soapNote:row.soap_note,treatments:row.treatments||void 0,priorAuthJustification:row.prior_auth_justification,isDeleted:!!row.is_deleted};this.admissions[compositeKey]=admission,this.admissionsByPatient[patientPublicId]?this.admissionsByPatient[patientPublicId].push(compositeKey):this.admissionsByPatient[patientPublicId]=[compositeKey],visitsProcessed++})),supabaseDataService_console.log(`SupabaseDataService (Prod Debug): Processed and cached ${visitsProcessed} visits. Total in cache: ${Object.keys(this.admissions).length}.`),this.isLoaded=!0,this.loadPromise=null,supabaseDataService_console.log("SupabaseDataService (Prod Debug): loadPatientData completed successfully."),this.emitChange()})(),this.loadPromise)}getAllPatients(){return this.isLoaded||this.isLoading?Object.values(this.patients):(this.loadPatientData().catch((()=>{})),[])}getPatient(patientId){var _this_patients_patientId;return this.isLoaded||this.isLoading||supabaseDataService_console.error(`SupabaseDataService: getPatient(${patientId}) called when data not loaded and not currently loading. THIS IS A BUG.`),null!==(_this_patients_patientId=this.patients[patientId])&&void 0!==_this_patients_patientId?_this_patients_patientId:null}getPatientAdmissions(patientId){if(!this.isLoaded&&!this.isLoading)return this.loadPatientData().catch((()=>{})),[];return(this.admissionsByPatient[patientId]||[]).map((key=>this.admissions[key])).filter(Boolean)}getPatientData(patientId){if(!this.isLoaded&&!this.isLoading)return supabaseDataService_console.error(`SupabaseDataService: getPatientData(${patientId}) called when data not loaded and not currently loading. THIS IS A BUG.`),null;const patient=this.getPatient(patientId);if(!patient)return supabaseDataService_console.warn(`SupabaseDataService (Prod Debug): getPatientData - Patient ${patientId} not found in cache (after load attempt).`),null;return{patient,admissions:this.getPatientAdmissions(patientId).map((admission=>({admission,diagnoses:[],labResults:[]})))}}getAllAdmissions(){this.isLoaded||this.isLoading||supabaseDataService_console.error("SupabaseDataService: getAllAdmissions called when data not loaded and not currently loading. THIS IS A BUG.");const allAds=[];return Object.values(this.admissions).forEach((admission=>{if(admission.isDeleted)return;var _this_patients_admission_patientId;const patient=null!==(_this_patients_admission_patientId=this.patients[admission.patientId])&&void 0!==_this_patients_admission_patientId?_this_patients_admission_patientId:null;allAds.push({patient,admission})})),allAds}getUpcomingConsultations(){this.isLoaded||this.isLoading||supabaseDataService_console.error("SupabaseDataService: getUpcomingConsultations called when data not loaded and not currently loading. THIS IS A BUG.");const upcoming=[],nowTime=(new Date).getTime();return Object.values(this.admissions).forEach((ad=>{if(!ad.isDeleted&&ad.scheduledStart&&"string"==typeof ad.scheduledStart&&ad.scheduledStart.length>0)try{const startDate=new Date(ad.scheduledStart),startTime=startDate.getTime();if(startDate instanceof Date&&!isNaN(startTime)){if(startTime>nowTime){const patient=this.patients[ad.patientId];patient?upcoming.push({patient,visit:ad}):supabaseDataService_console.warn(`SupabaseDataService (Prod Debug): Found upcoming visit ${ad.id} but patient ${ad.patientId} not found in cache.`)}}else supabaseDataService_console.warn(`SupabaseDataService (Prod Debug): Invalid date object after parsing scheduledStart for admission ${ad.id}. Original string: ${ad.scheduledStart}`)}catch(e){supabaseDataService_console.warn(`SupabaseDataService (Prod Debug): Error processing date for admission ${ad.id}. Original string: ${ad.scheduledStart}. Error: ${e instanceof Error?e.message:String(e)}`)}})),upcoming.sort(((a,b)=>new Date(a.visit.scheduledStart).getTime()-new Date(b.visit.scheduledStart).getTime()))}async updateAdmissionTranscript(patientId,admissionCompositeId,transcript){const originalAdmissionId=admissionCompositeId.split("_").slice(-1)[0],{error}=await this.supabase.from("visits").update({transcript}).eq("admission_id",originalAdmissionId);if(error)throw supabaseDataService_console.error("SupabaseDataService (Prod Debug): Error updating transcript in DB:",error.message),error;this.admissions[admissionCompositeId]?this.admissions[admissionCompositeId].transcript=transcript:supabaseDataService_console.warn(`SupabaseDataService (Prod Debug): updateAdmissionTranscript - Admission with composite ID ${admissionCompositeId} not found in local cache to update.`)}async createNewAdmission(patientId,opts){if(!this.patients[patientId]&&(this.isLoaded||this.isLoading||await this.loadPatientData(),!this.patients[patientId]))throw new Error(`Patient with original ID ${patientId} not found in cache; cannot create admission.`);const newAdmissionId=crypto.randomUUID(),nowIso=(new Date).toISOString();var _opts_scheduledStart;const startIso=null!==(_opts_scheduledStart=null==opts?void 0:opts.scheduledStart)&&void 0!==_opts_scheduledStart?_opts_scheduledStart:nowIso;var _opts_scheduledEnd;const endIso=(null==opts?void 0:opts.duration)?new Date(new Date(startIso).getTime()+6e4*opts.duration).toISOString():null!==(_opts_scheduledEnd=null==opts?void 0:opts.scheduledEnd)&&void 0!==_opts_scheduledEnd?_opts_scheduledEnd:null;var _opts_reason;const{error:insertErr}=await this.supabase.from("visits").insert([{admission_id:newAdmissionId,reason_for_visit:null!==(_opts_reason=null==opts?void 0:opts.reason)&&void 0!==_opts_reason?_opts_reason:null,scheduled_start_datetime:startIso,scheduled_end_datetime:endIso,actual_start_datetime:null,actual_end_datetime:null,is_deleted:!1,extra_data:{PatientID:patientId}}]);if(insertErr)throw supabaseDataService_console.error("SupabaseDataService: Failed to insert new admission into DB",insertErr),insertErr;const compositeId=`${patientId}_${newAdmissionId}`;var _opts_reason1;const admission={id:compositeId,patientId,scheduledStart:startIso,scheduledEnd:null!=endIso?endIso:"",reason:null!==(_opts_reason1=null==opts?void 0:opts.reason)&&void 0!==_opts_reason1?_opts_reason1:void 0};return this.admissions[compositeId]=admission,this.admissionsByPatient[patientId]||(this.admissionsByPatient[patientId]=[]),this.admissionsByPatient[patientId].unshift(compositeId),this.emitChange(),admission}subscribe(cb){this.changeSubscribers.includes(cb)||this.changeSubscribers.push(cb)}emitChange(){this.changeSubscribers.forEach((fn=>{try{fn()}catch(e){}}))}async createNewPatient(input){const newId=crypto.randomUUID();var _input_gender,_input_dateOfBirth;const{error:insertErr}=await this.supabase.from("patients").insert([{patient_id:newId,first_name:input.firstName,last_name:input.lastName,gender:null!==(_input_gender=input.gender)&&void 0!==_input_gender?_input_gender:null,dob:null!==(_input_dateOfBirth=input.dateOfBirth)&&void 0!==_input_dateOfBirth?_input_dateOfBirth:null,name:`${input.firstName} ${input.lastName}`.trim()}]);if(insertErr)throw supabaseDataService_console.error("SupabaseDataService: Failed to insert new patient",insertErr),insertErr;const patient={id:newId,firstName:input.firstName,lastName:input.lastName,name:`${input.firstName} ${input.lastName}`.trim(),gender:input.gender,dateOfBirth:input.dateOfBirth,alerts:[]};return this.patients[newId]=patient,this.admissionsByPatient[newId]=[],this.emitChange(),patient}async createNewPatientWithAdmission(patientInput,admissionInput){const patient=await this.createNewPatient(patientInput);return{patient,admission:await this.createNewAdmission(patient.id,admissionInput)}}markAdmissionAsDeleted(patientId,admissionId){const ad=this.admissions[admissionId];if(!ad||ad.patientId!==patientId)return!1;if(ad.isDeleted)return!0;ad.isDeleted=!0;const originalAdmissionId=admissionId.split("_").slice(-1)[0];return this.supabase.from("visits").update({is_deleted:!0}).eq("admission_id",originalAdmissionId).then((async({error,data})=>{if(error){supabaseDataService_console.error("SupabaseDataService: update by admission_id failed",JSON.stringify(error,null,2));const{error:err2}=await this.supabase.from("visits").update({is_deleted:!0}).eq("id",originalAdmissionId);err2&&supabaseDataService_console.error("SupabaseDataService: update by id failed",JSON.stringify(err2,null,2))}})),this.emitChange(),!0}restoreAdmission(patientId,admissionId){const ad=this.admissions[admissionId];if(!ad||ad.patientId!==patientId)return!1;if(!ad.isDeleted)return!0;delete ad.isDeleted;const originalAdmissionId=admissionId.split("_").slice(-1)[0];return this.supabase.from("visits").update({is_deleted:!1}).eq("admission_id",originalAdmissionId).then((async({error})=>{if(error){supabaseDataService_console.error("SupabaseDataService: restore update admission_id failed",JSON.stringify(error,null,2));const{error:err2}=await this.supabase.from("visits").update({is_deleted:!1}).eq("id",originalAdmissionId);err2&&supabaseDataService_console.error("SupabaseDataService: restore update id failed",JSON.stringify(err2,null,2))}})),this.emitChange(),!0}permanentlyDeleteAdmission(patientId,admissionId){const ad=this.admissions[admissionId];if(!ad||ad.patientId!==patientId)return!1;delete this.admissions[admissionId],this.admissionsByPatient[patientId]&&(this.admissionsByPatient[patientId]=this.admissionsByPatient[patientId].filter((key=>key!==admissionId)));const originalAdmissionId=admissionId.split("_").slice(-1)[0];return this.supabase.from("visits").delete().eq("admission_id",originalAdmissionId).then((async({error})=>{if(error){supabaseDataService_console.error("SupabaseDataService: delete admission_id failed",JSON.stringify(error,null,2));const{error:err2}=await this.supabase.from("visits").delete().eq("id",originalAdmissionId);err2&&supabaseDataService_console.error("SupabaseDataService: delete id failed",JSON.stringify(err2,null,2))}})),this.emitChange(),!0}unsubscribe(cb){this.changeSubscribers=this.changeSubscribers.filter((sub=>sub!==cb)),supabaseDataService_console.log("SupabaseDataService (Prod Debug): Unsubscribed a callback. Total subscribers:",this.changeSubscribers.length)}constructor(){this.supabase=function getSupabaseClient(){if(supabaseInstance)return supabaseInstance;const supabaseUrl="https://lmwbmckvlvzwftjwatxr.supabase.co",supabaseAnonKey="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxtd2JtY2t2bHZ6d2Z0andhdHhyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwNzc0MTIsImV4cCI6MjA2MjY1MzQxMn0.vb8ox4rmreRTbZZ-KZVos-7veAZaSu-V6GU79GsLj24";return supabaseInstance=(0,dist_module.UU)(supabaseUrl,supabaseAnonKey),supabaseInstance}(),this.isLoaded=!1,this.isLoading=!1,this.loadPromise=null,this.patients={},this.admissions={},this.admissionsByPatient={},this.changeSubscribers=[]}};var navigation=__webpack_require__("./node_modules/.pnpm/@storybook+nextjs@8.6.12_esbuild@0.17.19_next@15.1.4_@babel+core@7.27.1_@playwright+tes_e57bcacd7c8c636e60843c1166d4c660/node_modules/@storybook/nextjs/dist/export-mocks/navigation/index.mjs"),react_dom=__webpack_require__("./node_modules/.pnpm/next@15.1.4_@babel+core@7.27.1_@playwright+test@1.52.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react-dom/index.js");function QuickSearch({className,inputClassName,dropdownClassName,portal}){const router=(0,navigation.useRouter)(),[query,setQuery]=(0,react.useState)(""),[results,setResults]=(0,react.useState)([]),[isOpen,setIsOpen]=(0,react.useState)(!1),containerRef=(0,react.useRef)(null),dropdownRef=(0,react.useRef)(null),[portalStyle,setPortalStyle]=(0,react.useState)(null);(0,react.useEffect)((()=>{const handler=setTimeout((async()=>{const q=query.trim();if(q.length<3)return void setResults([]);try{await supabaseDataService.loadPatientData()}catch(_){}const lower=q.toLowerCase(),matches=[],allPatients=supabaseDataService.getAllPatients(),addIfNotExceeded=res=>{matches.length<10&&matches.push(res)},buildSnippet=raw=>{const words=raw.split(/\s+/),idx=words.findIndex((w=>w.toLowerCase().includes(lower)));if(-1===idx)return raw.slice(0,50);const start=Math.max(0,idx-2),end=Math.min(words.length,idx+3);return words.slice(start,end).join(" ")};if(allPatients.forEach((p=>{if(matches.length>=10)return;const fullName=(p.name||"").toLowerCase(),first=(p.firstName||"").toLowerCase(),last=(p.lastName||"").toLowerCase();if(fullName.includes(lower)||first.includes(lower)||last.includes(lower))return void addIfNotExceeded({patient:p,kind:"name"});const patientDiagFields=[p.primaryDiagnosis,p.diagnosis];for(const field of patientDiagFields)if(field&&field.toLowerCase().includes(lower)){addIfNotExceeded({patient:p,kind:"diagnosis",snippet:buildSnippet(field)});break}if(matches.length>=10)return;const admissions=supabaseDataService.getPatientAdmissions(p.id);for(const ad of admissions){if(matches.length>=10)break;ad.reason&&ad.reason.toLowerCase().includes(lower)&&addIfNotExceeded({patient:p,kind:"reason",admissionId:ad.id,snippet:buildSnippet(ad.reason)});p.id,ad.id;const treatments=ad.treatments||[];for(const t of treatments)if(t.drug&&t.drug.toLowerCase().includes(lower)){addIfNotExceeded({patient:p,kind:"treatment",admissionId:ad.id,snippet:buildSnippet(t.drug)});break}}})),setResults(matches),setIsOpen(!0),portal&&containerRef.current){const rect=containerRef.current.getBoundingClientRect(),dropdownEffectiveWidth=(rect=>{const base=rect.width,desired=Math.max(base,280);return Math.min(desired,520)})(rect);let newLeft=rect.right-dropdownEffectiveWidth;const margin=8;newLeft=Math.max(margin,newLeft),newLeft+dropdownEffectiveWidth+margin>window.innerWidth&&(newLeft=window.innerWidth-dropdownEffectiveWidth-margin),setPortalStyle({position:"fixed",top:rect.bottom+4,left:newLeft,width:dropdownEffectiveWidth,zIndex:9999})}}),300);return()=>clearTimeout(handler)}),[query,portal]),(0,react.useEffect)((()=>{const cb=()=>{query.trim().length>=3&&setQuery((q=>q+""))};return supabaseDataService.subscribe(cb),()=>supabaseDataService.unsubscribe(cb)}),[query]),(0,react.useEffect)((()=>{const handleClick=e=>{containerRef.current&&!containerRef.current.contains(e.target)&&dropdownRef.current&&!dropdownRef.current.contains(e.target)&&setIsOpen(!1)};return document.addEventListener("mousedown",handleClick),()=>document.removeEventListener("mousedown",handleClick)}),[]);function renderRow(r,idx){var _r_patient_firstName,_r_patient_lastName;return(0,jsx_runtime.jsxs)("button",{type:"button",onClick:()=>(res=>{let url=`/patients/${res.patient.id}`;"diagnosis"===res.kind?url+="?tab=diagnosis":"treatment"===res.kind?url+="?tab=treatment":"reason"===res.kind&&(url+="?tab=consult"),router.push(url),setQuery(""),setIsOpen(!1)})(r),className:"flex w-full items-center gap-2 px-3 py-2 text-sm hover:bg-white/10 focus:bg-white/10 focus:outline-none",children:[r.patient.photo?(0,jsx_runtime.jsx)("img",{src:r.patient.photo,alt:r.patient.name,className:"h-6 w-6 rounded-full object-cover flex-shrink-0"}):(0,jsx_runtime.jsxs)("div",{className:"flex-shrink-0 h-6 w-6 rounded-full bg-yellow-200 text-ink font-semibold flex items-center justify-center text-[0.625rem]",children:[((null===(_r_patient_firstName=r.patient.firstName)||void 0===_r_patient_firstName?void 0:_r_patient_firstName[0])||"").toUpperCase(),((null===(_r_patient_lastName=r.patient.lastName)||void 0===_r_patient_lastName?void 0:_r_patient_lastName[0])||"").toUpperCase()]}),(0,jsx_runtime.jsxs)("span",{className:"flex-1 text-left whitespace-nowrap overflow-hidden text-ellipsis",children:[r.patient.name||r.patient.id,"name"!==r.kind&&r.snippet&&(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[" ",(0,jsx_runtime.jsxs)("span",{className:"opacity-60",children:["> ",highlightSnippet(r.snippet,query.trim().toLowerCase())]})]})]})]},idx)}return(0,jsx_runtime.jsxs)("div",{ref:containerRef,className:(0,utils.cn)("relative",className),children:[(0,jsx_runtime.jsx)(Input,{placeholder:"Quick search",value:query,onChange:e=>setQuery(e.target.value),className:(0,utils.cn)("placeholder:text-white/60",inputClassName),onFocus:()=>{results.length>0&&setIsOpen(!0)}}),isOpen&&(portal?(0,react_dom.createPortal)((0,jsx_runtime.jsxs)("div",{ref:dropdownRef,style:portalStyle||{},className:(0,utils.cn)("max-h-80 overflow-auto rounded-xl bg-[rgba(255,255,255,0.55)] backdrop-blur-lg border border-white/25 shadow-lg animate-fade-in-down",dropdownClassName),children:[0===results.length&&query.trim().length>=3&&(0,jsx_runtime.jsx)("div",{className:"px-3 py-2 text-sm text-muted-foreground",children:"No matches found"}),results.map(((r,idx)=>renderRow(r,idx)))]}),document.body):(0,jsx_runtime.jsxs)("div",{ref:dropdownRef,className:(0,utils.cn)("absolute left-0 mt-1 max-h-80 overflow-auto z-50 rounded-xl bg-[rgba(255,255,255,0.55)] backdrop-blur-lg border border-white/25 shadow-lg animate-fade-in-down",dropdownClassName),children:[0===results.length&&query.trim().length>=3&&(0,jsx_runtime.jsx)("div",{className:"px-3 py-2 text-sm text-muted-foreground",children:"No matches found"}),results.map(((r,idx)=>renderRow(r,idx)))]}))]})}function highlightSnippet(snippet,term){const regex=new RegExp(`(${term})`,"ig"),parts=snippet.split(regex);return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:parts.map(((part,idx)=>regex.test(part)?(0,jsx_runtime.jsx)("span",{className:"font-semibold text-foreground",children:part},idx):(0,jsx_runtime.jsx)("span",{children:part},idx)))})}QuickSearch.__docgenInfo={description:"Lightweight search box that queries the in-memory patient cache (or Supabase)\nand surfaces up to 10 matching patients in a floating list. Clicking a result\nnavigates to that patient's workspace at /patients/[id].\n\nFuture iterations can switch the query source to the dedicated Supabase RPC\nwithout changing the component surface.",methods:[],displayName:"QuickSearch",props:{className:{required:!1,tsType:{name:"string"},description:"Wrapper className"},inputClassName:{required:!1,tsType:{name:"string"},description:"Additional className passed to the underlying Input"},dropdownClassName:{required:!1,tsType:{name:"string"},description:"Optional dropdown class override (e.g., for sidebar)"},portal:{required:!1,tsType:{name:"boolean"},description:"Render dropdown in a portal to avoid clipping (e.g., inside sidebar)"}}}},"./src/lib/utils.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{cn:()=>cn});var clsx__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/clsx@2.1.1/node_modules/clsx/dist/clsx.mjs"),tailwind_merge__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/tailwind-merge@2.6.0/node_modules/tailwind-merge/dist/bundle-mjs.mjs");function cn(...inputs){return(0,tailwind_merge__WEBPACK_IMPORTED_MODULE_0__.QP)((0,clsx__WEBPACK_IMPORTED_MODULE_1__.$)(inputs))}}}]);