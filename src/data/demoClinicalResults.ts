import { DifferentialDiagnosis } from '@/lib/types';

/**
 * Fresh clinical results generated by running Dorothy Robinson's transcript 
 * through the clinical engine API. These results are in English and include
 * comprehensive differential diagnoses and treatment recommendations.
 */

export interface DemoClinicalData {
  primaryDiagnosis: {
    name: string;
    code: string;
    confidence: number;
    description: string;
  };
  differentialDiagnoses: Array<{
    name: string;
    likelihood: string;
    keyFactors: string;
    priority: number;
  }>;
  treatments: Array<{
    drug: string;
    status: string;
    rationale: string;
  }>;
}

// New clinical results from our successful API call
export const demoClinicalResults: DemoClinicalData = {
  // Primary diagnosis from clinical engine
  primaryDiagnosis: {
    name: "Type 2 diabetes mellitus, poorly controlled",
    code: "E11.9",
    confidence: 95,
    description: "Type 2 diabetes mellitus without complications, currently poorly controlled with drug interaction requiring medication adjustment and monitoring"
  },
  
  // Differential diagnoses from clinical engine
  differentialDiagnoses: [
    {
      name: "Drug-Drug Interaction: Glyburide + Warfarin",
      likelihood: "High (95%)",
      keyFactors: "Recent glyburide initiation with existing warfarin therapy, bleeding symptoms",
      priority: 1
    },
    {
      name: "Uncontrolled Type 2 Diabetes Mellitus", 
      likelihood: "High (90%)",
      keyFactors: "Polyuria, polydipsia, no recent monitoring, broken glucometer",
      priority: 2
    },
    {
      name: "Supratherapeutic Anticoagulation",
      likelihood: "High (85%)",
      keyFactors: "Easy bruising, prolonged nosebleed, INR overdue by 2 months",
      priority: 3
    },
    {
      name: "Diabetic Ketoacidosis (DKA)",
      likelihood: "Moderate (40%)", 
      keyFactors: "Dehydration, polyuria, polydipsia, but no known ketosis symptoms",
      priority: 4
    },
    {
      name: "Hyperosmolar Hyperglycemic State (HHS)",
      likelihood: "Moderate (35%)",
      keyFactors: "Dehydration, altered mental status, elderly patient with Type 2 DM",
      priority: 5
    }
  ],
  
  // Treatment recommendations from clinical engine
  treatments: [
    {
      drug: "Discontinue glyburide immediately",
      status: "Discontinued",
      rationale: "High risk drug interaction with warfarin causing increased bleeding risk"
    },
    {
      drug: "Continue metformin 1000mg twice daily",
      status: "Continued", 
      rationale: "Well-tolerated first-line diabetes medication, safer with anticoagulation"
    },
    {
      drug: "Start insulin glargine 10 units subcutaneous daily",
      status: "New prescription",
      rationale: "Long-acting insulin for better glucose control without warfarin interaction"
    },
    {
      drug: "Hold warfarin pending INR results",
      status: "Held temporarily",
      rationale: "Evaluate current anticoagulation level due to bleeding symptoms"
    },
    {
      drug: "STAT labs: BMP, HbA1c, PT/INR, CBC with differential", 
      status: "Ordered",
      rationale: "Essential monitoring for diabetes control and bleeding risk assessment"
    }
  ]
};

/**
 * Convert demo clinical results to DifferentialDiagnosis format for UI components
 */
export function getDemoDifferentialDiagnoses(): DifferentialDiagnosis[] {
  return demoClinicalResults.differentialDiagnoses.map((dx, index) => {
    // Extract percentage from likelihood string like "High (90%)"
    const percentMatch = dx.likelihood.match(/\((\d+)%\)/);
    const probabilityDecimal = percentMatch ? parseInt(percentMatch[1]) : 50;
    
    // Determine qualitative risk based on percentage
    let qualitativeRisk: "Negligible" | "Low" | "Moderate" | "High" | "Certain";
    if (probabilityDecimal < 1) qualitativeRisk = "Negligible";
    else if (probabilityDecimal < 10) qualitativeRisk = "Low";
    else if (probabilityDecimal < 40) qualitativeRisk = "Moderate";
    else if (probabilityDecimal < 70) qualitativeRisk = "High";
    else qualitativeRisk = "Certain";
    
    return {
      name: dx.name,
      likelihood: qualitativeRisk, // For backward compatibility
      likelihoodPercentage: probabilityDecimal, // For backward compatibility
      qualitativeRisk,
      probabilityDecimal,
      rank: index + 1,
      keyFactors: dx.keyFactors,
      explanation: '', // Demo data doesn't have this
      supportingEvidence: [], // Demo data doesn't have this
      icdCodes: [], // Demo data doesn't have this
    };
  });
} 