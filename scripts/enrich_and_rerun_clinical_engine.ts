import { createClient, SupabaseClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fetch from 'node-fetch';

// Load environment variables
dotenv.config({ path: '.env.local' });

const SUPABASE_URL = 'https://lmwbmckvlvzwftjwatxr.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imxtd2JtY2t2bHZ6d2Z0andhdHhyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwNzc0MTIsImV4cCI6MjA2MjY1MzQxMn0.vb8ox4rmreRTbZZ-KZVos-7veAZaSu-V6GU79GsLj24';
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

const supabase: SupabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

interface Patient {
  id: string;
  patient_id: string;
  first_name: string;
  last_name: string;
}

interface Encounter {
  id: string;
  encounter_id: string;
  transcript: string | null;
}

interface ClinicalEngineResponse {
  success: boolean;
  result?: {
    diagnosis?: string;
    treatments?: any[];
    richContent?: {
      diagnosis: boolean;
      treatments: boolean;
    };
  };
}

const TARGET_PATIENTS: Array<{ first: string; last: string }> = [
  { first: 'Maria', last: 'Gomez' },
  { first: 'James', last: 'Lee' },
  { first: 'Priya', last: 'Patel' },
  { first: 'Alice', last: 'Smith' }
];

function isStub(transcript: string | null): boolean {
  if (!transcript) return true;
  const trimmed = transcript.trim();
  return trimmed.length < 120 || trimmed.split(/\s+/).length < 20;
}

function generateEnrichedTranscript(patientName: string): string {
  // Simple heuristic enrichment using generic template; could be replaced with AI generation
  return `Clinician: Good morning, ${patientName}. What brings you in today?\n` +
    `${patientName}: I've been experiencing persistent headaches over the last two weeks, along with some nausea.\n` +
    `Clinician: On a scale of 1 to 10, how severe are the headaches?\n` +
    `${patientName}: Around a 6. They tend to worsen in the afternoon.\n` +
    `Clinician: Any visual disturbances, like blurred vision or aura?\n` +
    `${patientName}: Occasionally some blurred vision when the pain peaks.\n` +
    `Clinician: Do you have any history of migraines or chronic headaches?\n` +
    `${patientName}: No, this is new for me.\n` +
    `Clinician: Have you taken any medication that helps?\n` +
    `${patientName}: Over-the-counter ibuprofen helps a bit, but the pain returns.\n` +
    `Clinician: Understood. Let's perform a physical exam and consider neuro-imaging if necessary.\n` +
    `[Transcript autogenerated to enrich clinical context]`;
}

async function runEngineViaAPI(patientId: string, encounterId: string, transcript: string) {
  console.log(`‚öôÔ∏è  Calling clinical engine API for patient ${patientId}, encounter ${encounterId}`);
  
  const response = await fetch(`${API_BASE_URL}/api/clinical-engine`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      patientId,
      encounterId,
      transcript
    })
  });

  if (!response.ok) {
    const errorText = await response.text();
    throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);
  }

  const result = await response.json() as ClinicalEngineResponse;
  console.log('‚úÖ Clinical engine API call finished');
  
  if (result.success) {
    console.log('üéâ Processing completed successfully!');
    console.log('üìù Diagnosis:', result.result?.diagnosis || 'Not provided');
    console.log('üíä Treatments:', result.result?.treatments?.length || 0, 'treatments');
    if (result.result?.richContent) {
      console.log('‚ú® Rich content generated:', !!result.result.richContent.diagnosis, 'diagnosis,', !!result.result.richContent.treatments, 'treatments');
    }
  } else {
    console.log('‚ö†Ô∏è  API returned success: false');
    console.log('üìÑ Response:', JSON.stringify(result, null, 2));
  }
  
  return result;
}

async function main() {
  console.log('üöÄ Starting clinical engine processing for target patients...');
  
  for (const target of TARGET_PATIENTS) {
    console.log(`\nüìã Processing ${target.first} ${target.last}...`);
    
    const { data: patients, error: pErr } = await supabase
      .from('patients')
      .select('*')
      .eq('first_name', target.first)
      .eq('last_name', target.last);
      
    if (pErr) throw pErr;
    
    if (!patients || patients.length === 0) {
      console.warn(`‚ö†Ô∏è  No patient found for ${target.first} ${target.last}`);
      continue;
    }

    const patient = patients[0] as Patient;
    console.log(`üë§ Found patient: ${patient.first_name} ${patient.last_name} (ID: ${patient.patient_id})`);

    const { data: encounters, error: eErr } = await supabase
      .from('encounters')
      .select('*')
      .eq('patient_supabase_id', patient.id)
      .or('is_deleted.is.null,is_deleted.eq.false'); // Only get non-deleted encounters
      
    if (eErr) throw eErr;

    console.log(`üìù Found ${encounters?.length || 0} active encounters`);

    for (const enc of encounters as Encounter[]) {
      console.log(`\nüîç Processing encounter ${enc.encounter_id}...`);
      
      let transcript = enc.transcript;
      const stub = isStub(transcript);

      if (stub) {
        console.log(`üìù Encounter has stub transcript. Enriching...`);
        const enriched = generateEnrichedTranscript(`${patient.first_name}`);
        
        // Backup original transcript in extra_data
        const { error: upErr } = await supabase
          .from('encounters')
          .update({ 
            transcript: enriched, 
            extra_data: { previous_transcript: transcript || '' } 
          })
          .eq('id', enc.id);
          
        if (upErr) throw upErr;
        transcript = enriched;
        console.log('‚úÖ Transcript enriched and updated.');
      } else {
        console.log(`‚úÖ Encounter transcript is sufficient; no enrichment needed.`);
      }

      try {
        await runEngineViaAPI(patient.patient_id, enc.id, transcript || '');
        console.log('‚úÖ Clinical engine processing complete for this encounter.');
      } catch (error) {
        console.error('‚ùå Error processing encounter:', error);
      }
    }
  }

  console.log('\nüéâ All processing complete!');
}

main().catch(err => {
  console.error('‚ùå Fatal error:', err);
  process.exit(1);
}); 