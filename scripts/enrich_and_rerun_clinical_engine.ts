import { createClient, SupabaseClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
import fetch from 'node-fetch';
import { ClinicalEngineServiceV3 } from '../src/lib/clinicalEngineServiceV3';

// Load environment variables
dotenv.config({ path: process.cwd() + '/.env.local' });

const SUPABASE_URL = process.env.SUPABASE_URL as string;
const SUPABASE_ANON_KEY = process.env.SUPABASE_ANON_KEY as string;
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';

if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
  throw new Error('Missing Supabase credentials in environment variables');
}

const supabase: SupabaseClient = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

interface Patient {
  id: string;
  patient_id: string;
  first_name: string;
  last_name: string;
}

interface Encounter {
  id: string;
  encounter_id: string;
  transcript: string | null;
}

const TARGET_PATIENTS: Array<{ first: string; last: string }> = [
  { first: 'Maria', last: 'Gomez' },
  { first: 'James', last: 'Lee' },
  { first: 'Priya', last: 'Patel' },
  { first: 'Alice', last: 'Smith' }
];

function isStub(transcript: string | null): boolean {
  if (!transcript) return true;
  const trimmed = transcript.trim();
  return trimmed.length < 120 || trimmed.split(/\s+/).length < 20;
}

function generateEnrichedTranscript(patientName: string): string {
  // Simple heuristic enrichment using generic template; could be replaced with AI generation
  return `Clinician: Good morning, ${patientName}. What brings you in today?\n` +
    `${patientName}: I've been experiencing persistent headaches over the last two weeks, along with some nausea.\n` +
    `Clinician: On a scale of 1 to 10, how severe are the headaches?\n` +
    `${patientName}: Around a 6. They tend to worsen in the afternoon.\n` +
    `Clinician: Any visual disturbances, like blurred vision or aura?\n` +
    `${patientName}: Occasionally some blurred vision when the pain peaks.\n` +
    `Clinician: Do you have any history of migraines or chronic headaches?\n` +
    `${patientName}: No, this is new for me.\n` +
    `Clinician: Have you taken any medication that helps?\n` +
    `${patientName}: Over-the-counter ibuprofen helps a bit, but the pain returns.\n` +
    `Clinician: Understood. Let's perform a physical exam and consider neuro-imaging if necessary.\n` +
    `[Transcript autogenerated to enrich clinical context]`;
}

async function runEngineInline(patientId: string, encounterId: string, transcript: string) {
  const engine = new ClinicalEngineServiceV3();
  console.log(`⚙️  Running ClinicalEngineServiceV3 inline for patient ${patientId}, encounter ${encounterId}`);
  const result = await engine.runDiagnosticPipeline(patientId, encounterId, transcript);
  console.log('✅ Diagnostic pipeline finished');
  return result;
}

async function main() {
  for (const target of TARGET_PATIENTS) {
    console.log(`\nProcessing ${target.first} ${target.last}...`);
    const { data: patients, error: pErr } = await supabase
      .from('patients')
      .select('*')
      .eq('first_name', target.first)
      .eq('last_name', target.last);
    if (pErr) throw pErr;
    if (!patients || patients.length === 0) {
      console.warn(`No patient found for ${target.first} ${target.last}`);
      continue;
    }

    const patient = patients[0] as Patient;

    const { data: encounters, error: eErr } = await supabase
      .from('encounters')
      .select('*')
      .eq('patient_supabase_id', patient.id);
    if (eErr) throw eErr;

    for (const enc of encounters as Encounter[]) {
      let transcript = enc.transcript;
      const stub = isStub(transcript);

      if (stub) {
        console.log(`Encounter ${enc.encounter_id} has stub transcript. Enriching...`);
        const enriched = generateEnrichedTranscript(`${patient.first_name}`);
        // Backup original transcript in extra_data
        const { error: upErr } = await supabase
          .from('encounters')
          .update({ transcript: enriched, extra_data: { previous_transcript: transcript || '' } })
          .eq('id', enc.id);
        if (upErr) throw upErr;
        transcript = enriched;
        console.log('Transcript enriched and updated.');
      } else {
        console.log(`Encounter ${enc.encounter_id} transcript is sufficient; no enrichment needed.`);
      }

      console.log('Invoking clinical engine inline...');
      await runEngineInline(patient.patient_id, enc.id, transcript || '');
      console.log('Clinical engine processing complete.');
    }
  }

  console.log('\nAll processing complete.');
}

main().catch(err => {
  console.error('Error:', err);
  process.exit(1);
}); 